
// Função de inicialização dos pinos e PWM
void setup() {
    stdio_init_all();
    
    // Inicializa os pinos de PWM para os LEDs
    gpio_set_function(LED_RED_PIN, GPIO_FUNC_PWM);
    gpio_set_function(LED_BLUE_PIN, GPIO_FUNC_PWM);
    
    // Configura o PWM nos pinos dos LEDs
    uint slice_num_red = pwm_gpio_to_slice_num(LED_RED_PIN);
    uint slice_num_blue = pwm_gpio_to_slice_num(LED_BLUE_PIN);
    
    pwm_set_clkdiv(slice_num_red, 64); // Divisor para ajustar a frequência do PWM
    pwm_set_clkdiv(slice_num_blue, 64); // Divisor para ajustar a frequência do PWM
    
    pwm_set_wrap(slice_num_red, 4095); // Resolução de 12 bits (0 a 4095)
    pwm_set_wrap(slice_num_blue, 4095); // Resolução de 12 bits (0 a 4095)
    
    pwm_set_enabled(slice_num_red, true);
    pwm_set_enabled(slice_num_blue, true);

    // Inicializa o display SSD1306
    ssd1306_init();
    ssd1306_clear();
    
    // Configuração dos pinos de ADC
    adc_init();
    adc_gpio_init(JOY_X_PIN);
    adc_gpio_init(JOY_Y_PIN);
    adc_select_input(0); // Seleciona ADC0 para o eixo X
}

// Função de leitura do joystick (eixos X e Y)
int read_joystick_x() {
    adc_select_input(0); // Eixo X
    return adc_read();
}

int read_joystick_y() {
    adc_select_input(1); // Eixo Y
    return adc_read();
}

// Função para atualizar a posição do quadrado no display
void update_square_position(int x, int y) {
    ssd1306_clear();
    int square_size = 8;
    ssd1306_fill_rect(x, y, square_size, square_size, WHITE);
    ssd1306_display();
}

// Função para controlar o brilho do LED
void set_led_brightness(int pin, int brightness) {
    uint slice_num = pwm_gpio_to_slice_num(pin);
    pwm_set_gpio_level(pin, brightness);
}

int main() {
    setup();
    
    // Definição da posição inicial do quadrado
    int square_x = SCREEN_WIDTH / 2 - 4;
    int square_y = SCREEN_HEIGHT / 2 - 4;
    
    while (1) {
        // Leitura dos valores dos eixos X e Y do joystick (de 0 a 4095)
        int joy_x = read_joystick_x();
        int joy_y = read_joystick_y();
        
        // Ajuste do brilho dos LEDs com base no eixo Y (para o LED azul)
        int blue_brightness = (joy_y < 2048) ? (2048 - joy_y) : (joy_y - 2048);
        set_led_brightness(LED_BLUE_PIN, blue_brightness);
        
        // Ajuste do brilho dos LEDs com base no eixo X (para o LED vermelho)
        int red_brightness = (joy_x < 2048) ? (2048 - joy_x) : (joy_x - 2048);
        set_led_brightness(LED_RED_PIN, red_brightness);
        
        // Atualiza a posição do quadrado com base no joystick
        square_x = (joy_x - 2048) / 16 + (SCREEN_WIDTH / 2 - 4);
        square_y = (joy_y - 2048) / 16 + (SCREEN_HEIGHT / 2 - 4);
        
        // Limitar a posição do quadrado dentro do display
        if (square_x < 0) square_x = 0;
        if (square_y < 0) square_y = 0;
        if (square_x > SCREEN_WIDTH - 8) square_x = SCREEN_WIDTH - 8;
        if (square_y > SCREEN_HEIGHT - 8) square_y = SCREEN_HEIGHT - 8;
        
        // Atualiza o display com a nova posição do quadrado
        update_square_position(square_x, square_y);
        
        sleep_ms(50); // Pequeno atraso para suavizar a movimentação
    }

    return 0;
}
