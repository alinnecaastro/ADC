#include <stdio.h>
#include "pico/stdlib.h"
#include "hardware/pwm.h"
#include "hardware/adc.h"
#include "ssd1306.h"

#define LED_RED_PIN 16
#define LED_GREEN_PIN 17
#define LED_BLUE_PIN 18

#define JOYSTICK_X_PIN 26
#define JOYSTICK_Y_PIN 27

#define DISPLAY_WIDTH 128
#define DISPLAY_HEIGHT 64
#define SQUARE_SIZE 8

#define JOYSTICK_CENTER 2048
#define JOYSTICK_MAX 4095

void setup_pwm(uint pin) {
    gpio_set_function(pin, GPIO_FUNC_PWM);
    uint slice_num = pwm_gpio_to_slice_num(pin);
    pwm_set_wrap(slice_num, JOYSTICK_MAX);
    pwm_set_enabled(slice_num, true);
}

void set_pwm_duty(uint pin, uint16_t duty) {
    uint slice_num = pwm_gpio_to_slice_num(pin);
    uint channel = pwm_gpio_to_channel(pin);
    pwm_set_chan_level(slice_num, channel, duty);
}

uint16_t read_joystick(uint pin) {
    adc_select_input(pin - 26);
    return adc_read();
}

void draw_square(ssd1306_t *disp, int x, int y) {
    ssd1306_clear(disp);
    for (int i = 0; i < SQUARE_SIZE; i++) {
        for (int j = 0; j < SQUARE_SIZE; j++) {
            ssd1306_draw_pixel(disp, x + i, y + j);
        }
    }
    ssd1306_show(disp);
}

int main() {
    stdio_init_all();
    adc_init();
    adc_gpio_init(JOYSTICK_X_PIN);
    adc_gpio_init(JOYSTICK_Y_PIN);

    setup_pwm(LED_RED_PIN);
    setup_pwm(LED_GREEN_PIN);
    setup_pwm(LED_BLUE_PIN);

    ssd1306_t disp;
    ssd1306_init(&disp, 128, 64, 0x3C, i2c_default);
    ssd1306_clear(&disp);

    int square_x = (DISPLAY_WIDTH - SQUARE_SIZE) / 2;
    int square_y = (DISPLAY_HEIGHT - SQUARE_SIZE) / 2;

    while (true) {
        uint16_t x_value = read_joystick(JOYSTICK_X_PIN);
        uint16_t y_value = read_joystick(JOYSTICK_Y_PIN);

        int16_t x_diff = x_value - JOYSTICK_CENTER;
        int16_t y_diff = y_value - JOYSTICK_CENTER;

        set_pwm_duty(LED_RED_PIN, abs(x_diff) * 2);
        set_pwm_duty(LED_BLUE_PIN, abs(y_diff) * 2);

        square_x += x_diff / 512;
        square_y += y_diff / 512;

        if (square_x < 0) square_x = 0;
        if (square_x > DISPLAY_WIDTH - SQUARE_SIZE) square_x = DISPLAY_WIDTH - SQUARE_SIZE;
        if (square_y < 0) square_y = 0;
        if (square_y > DISPLAY_HEIGHT - SQUARE_SIZE) square_y = DISPLAY_HEIGHT - SQUARE_SIZE;

        draw_square(&disp, square_x, square_y);

        sleep_ms(20);
    }

    return 0;
}